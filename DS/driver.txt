//LinkedList ll = new LinkedList();
            //ll.Head = new Node(10);
            //ll.InsertNodeAtEnd(10);
            //ll.InsertNodeAtEnd(16);
            //ll.InsertNodeAtEnd(13);
            //ll.InsertNodeAtEnd(1);
            //ll.InsertNodeAtEnd(16);
            //ll.InsertNodeAtEnd(1);
            //ll.InsertNodeAtEnd(17);
            //ll.InsertNodeAtEnd(11);

            //Node c = ll.Head;

            //while (c.Next != null)
            //{
            //    c = c.Next;
            //}

            //c.Next = ll.Head;

            ////ll.PrintList();

            //Node slow;

            //Console.WriteLine("LinkedList : {0}", ll.FindIfLinkedListIsCircular(ll.Head, out slow));

            //Console.WriteLine("Meeting point is : {0}", slow.Data);

            //Console.WriteLine("Removing circle");

            //ll.RemoveCircle(ll.Head);
            //ll.PrintList();

            //Node n = ll.FindNthNodeFromEnd(ll.Head, 4);
            //Console.WriteLine("nth node is {0}", n.Data);


            //Node node = ll.FindMidpoint(ll.Head);

            //Console.WriteLine(node.Data);

            //QArray a = new QArray();


            //int[] arr = new int[] { 4, 10, 5, 8, 20, 15, 3, 12 };
            //a.PrintNearestSmallestOnLeft(arr);
            //Seperator();
            //StackQ s = new StackQ();

            //s.PrintNearestSmallestOnLeft(arr);
            //Seperator();
            //s.PrintNearestSmallestOnRight(arr);


            //string s1 = "{{}}{}{}";
            //string s2 = "[]{}()";
            //string s3 = "[]{}({[]})";
            //string s4 = "[]{}({[})";
            //string s5 = "}}}{{{";

            //s.BalancedParenthesis(s1);
            //s.BalancedParenthesis(s2);
            //s.BalancedParenthesis(s3);
            //s.BalancedParenthesis(s4);
            //s.BalancedParenthesis(s5);

             //var root = new BTNode(10);
            //root.left = new BTNode(11);
            //root.left.left = new BTNode(7);
            //root.left.right = new BTNode(12);
            //root.right = new BTNode(9);
            //root.right.left = new BTNode(15);
            //root.right.right = new BTNode(8);
            ////BTLevelOrderTraversal(root, 3);
            ////BTLevelOrderTraversalUsingQueue(root);

            //ZigZagTraversal(root);
            //Console.WriteLine("Height of the BT is {0}", HeighOfBT(root));